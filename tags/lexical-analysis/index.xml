<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lexical Analysis on Squirrels</title>
    <link>https://eliquious.github.io/tags/lexical-analysis/</link>
    <description>Recent content in Lexical Analysis on Squirrels</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 16 Jan 2016 20:02:44 -0600</lastBuildDate>
    
	<atom:link href="https://eliquious.github.io/tags/lexical-analysis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Writing a database in Go: Part 2</title>
      <link>https://eliquious.github.io/post/writing-a-database-part-2/</link>
      <pubDate>Sat, 16 Jan 2016 20:02:44 -0600</pubDate>
      
      <guid>https://eliquious.github.io/post/writing-a-database-part-2/</guid>
      <description>This is a continuation of the first part of this series where we discussed the data model and query language for this new database. In this second part we will setup our lexer.
Lexing Lexing is the process for transforming a textual input into tokens representing each keyword, character or puncuation. Fortunately, there&amp;rsquo;s little we have to do for lexing the input due to a library I have written previous.</description>
    </item>
    
  </channel>
</rss>