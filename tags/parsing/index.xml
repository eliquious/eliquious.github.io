<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Parsing on Squirrels</title>
    <link>https://eliquious.github.io/tags/parsing/</link>
    <description>Recent content in Parsing on Squirrels</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 Jan 2016 20:18:01 -0600</lastBuildDate>
    
	<atom:link href="https://eliquious.github.io/tags/parsing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Writing a database in Go: Part 3</title>
      <link>https://eliquious.github.io/post/writing-a-database-part-3/</link>
      <pubDate>Sun, 31 Jan 2016 20:18:01 -0600</pubDate>
      
      <guid>https://eliquious.github.io/post/writing-a-database-part-3/</guid>
      <description>This is a continuation of the second part of this series where we discussed lexing the query language for this new database. In this third part we will write our parser.
Parsing We start by defining the Parser. A parser takes the tokens produced by the lexer and creates AST nodes which can then be used by a query executor.
For PrefixDB, our parser is a simple struct with a TokenBuffer.</description>
    </item>
    
  </channel>
</rss>