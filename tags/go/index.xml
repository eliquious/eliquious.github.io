<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Squirrels</title>
    <link>https://eliquious.github.io/tags/go/</link>
    <description>Recent content in Go on Squirrels</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 Jan 2016 20:18:01 -0600</lastBuildDate>
    
	<atom:link href="https://eliquious.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Writing a database in Go: Part 3</title>
      <link>https://eliquious.github.io/post/writing-a-database-part-3/</link>
      <pubDate>Sun, 31 Jan 2016 20:18:01 -0600</pubDate>
      
      <guid>https://eliquious.github.io/post/writing-a-database-part-3/</guid>
      <description>This is a continuation of the second part of this series where we discussed lexing the query language for this new database. In this third part we will write our parser.
Parsing We start by defining the Parser. A parser takes the tokens produced by the lexer and creates AST nodes which can then be used by a query executor.
For PrefixDB, our parser is a simple struct with a TokenBuffer.</description>
    </item>
    
    <item>
      <title>Writing a database in Go: Part 2</title>
      <link>https://eliquious.github.io/post/writing-a-database-part-2/</link>
      <pubDate>Sat, 16 Jan 2016 20:02:44 -0600</pubDate>
      
      <guid>https://eliquious.github.io/post/writing-a-database-part-2/</guid>
      <description>This is a continuation of the first part of this series where we discussed the data model and query language for this new database. In this second part we will setup our lexer.
Lexing Lexing is the process for transforming a textual input into tokens representing each keyword, character or puncuation. Fortunately, there&amp;rsquo;s little we have to do for lexing the input due to a library I have written previous.</description>
    </item>
    
    <item>
      <title>Writing a database in Go: Part 1</title>
      <link>https://eliquious.github.io/post/writing-a-database-part-1/</link>
      <pubDate>Fri, 15 Jan 2016 00:21:42 -0600</pubDate>
      
      <guid>https://eliquious.github.io/post/writing-a-database-part-1/</guid>
      <description>Databases are a dime a dozen these days. So why in the world would I write another one? Well, mainly for fun, but also for specialization. Building a database which specializes in one thing could reap huge benefits such as performance, data model, or even operations.
So what kind of database are we building? We&amp;rsquo;re going to build yet another key-value database. However, this one is going to be geared specifically for range scans and is called PrefixDB.</description>
    </item>
    
  </channel>
</rss>